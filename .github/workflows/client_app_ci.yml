name: Client App CI/CD

on:
  push:
    branches:
      - master
      - develop
      - feature-*
      - release-*
#    paths:
#      - 'client_app/*'
  pull_request:
    branches:
      - master
      - develop
      - feature-*
      - release-*
    paths:
      - 'client_app/*'

jobs:
  test:
# *************************************** ENVIRONMENT SETUP ***************************************
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Disable shallow clone

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r client_app/requirements.txt

    - name: Set up PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

    - name: Create directories
      run: |
        echo "directory = "        
        pwd        
        mkdir -p client_app/tests/test_reports
        mkdir -p client_app/logs

# *************************************** UNIT TESTING ***************************************
    - name: Run tests with coverage
      run: |
        source venv/bin/activate
        echo "From devops\ run pytest in client_app\ using the pytest.ini in that directory"  
        python -m pytest -c client_app/pytest.ini client_app/
        echo "directory = "        
        pwd
        ls -l
        echo "directory = client_app/tests/test_reports"                
        ls -l client_app/tests/test_reports

# *************************************** STATIC SCANNING ***************************************
    - name: Upload coverage to SonarCloud
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=kenlong2206_devops_client
          -Dsonar.organization=kenlong2206          
          -Dsonar.sources=client_app/src
          -Dsonar.python.version=3
          -Dsonar.branch.name=${{ github.ref_name }}
          -Dsonar.python.xunit.reportPath=client_app/tests/test_reports/xunit-result.xml
          -Dsonar.python.coverage.reportPaths=client_app/tests/test_reports/coverage.xml
          -Dsonar.exclusions=**/tests/**,**/__init__.py
          -Dsonar.coverage.exclusions=**/tests/**

# ************************************* CONTAINERISE ***************************************
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/client_app:latest -f client_app/Dockerfile .

    - name: Log into Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/client_app:latest

# *************************************** INTEGRATION TESTING ***************************************
    - name: Pull the latest client-app Docker image
      run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/client_app:latest

    - name: Pull the production calculator-app Docker image
      run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/calculator_app:production

    - name: Run the services
      run: |
        docker-compose -f docker-compose.new_client_app.yml up -d
        docker ps
      

    - name: Install Newman
      run: |
        npm install -g newman
        npm install -g newman-reporter-html

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 5      

    - name: Run Postman tests against docker container
      run: |
        pwd
        ls -la
        echo "tests/integration"
        ls -la tests/integration
        npx newman run 'tests/integration/client_app_integration_tests.postman_collection.json' -e 'tests/integration/devops_env.postman_environment.json' --reporters cli,html --reporter-html-export 'tests/test_reports/client_app_integration_tests_report.html'
        npx newman run 'tests/integration/calculator_app_integration_tests.postman_collection.json' -e 'tests/integration/devops_env.postman_environment.json' --reporters cli,html --reporter-html-export 'tests/test_reports/calculator_app_integration_tests_report.html'
        echo "tests/test_reports"
        ls -la tests/test_reports        

    - name: Stop and clean up docker-compose services
      run: docker-compose -f docker-compose.new_client_app.yml down

# *************************************** UPLOAD ARTIFACTS ***************************************
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: test_reports
        path: ./client_app/tests/test_reports

    - name: Upload log file
      uses: actions/upload-artifact@v4
      with:
        name: calculator_log.txt
        path: ./client_app/logs
