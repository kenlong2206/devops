{
	"info": {
		"_postman_id": "cc4dc9c6-5fd0-4b18-a871-286dd9ad3f66",
		"name": "client_app_integration_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4144263"
	},
	"item": [
		{
			"name": "root",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"// Basic check if response body contains typical HTML elements\r",
							"pm.test(\"Response body contains basic HTML structure\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    // Check for <!DOCTYPE html>\r",
							"    pm.expect(responseBody).to.include(\"<!DOCTYPE html\");\r",
							"\r",
							"    // Check for opening and closing <html> tags\r",
							"    pm.expect(responseBody).to.include(\"<html\");\r",
							"    pm.expect(responseBody).to.include(\"</html>\");\r",
							"\r",
							"    // Check for opening and closing <head> tags\r",
							"    pm.expect(responseBody).to.include(\"<head>\");\r",
							"    pm.expect(responseBody).to.include(\"</head>\");\r",
							"\r",
							"    // Check for opening and closing <body> tags\r",
							"    pm.expect(responseBody).to.include(\"<body>\");\r",
							"    pm.expect(responseBody).to.include(\"</body>\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseClientUrl}}/",
					"host": [
						"{{baseClientUrl}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "client health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// check the status is OK\r",
							"pm.test(\"Response body contains the correct result\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('status', 'OK'); \r",
							"});\r",
							"\r",
							"\r",
							"// check version field is of format integer.integer.integer\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var versionPattern = /^\\d+\\.\\d+\\.\\d+$/; \r",
							"    pm.expect(jsonData.version).to.match(versionPattern);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseClientUrl}}/health",
					"host": [
						"{{baseClientUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "client start",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('status', \"started\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseClientUrl}}/start",
					"host": [
						"{{baseClientUrl}}"
					],
					"path": [
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "client stop",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('status', \"stopped\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseClientUrl}}/stop",
					"host": [
						"{{baseClientUrl}}"
					],
					"path": [
						"stop"
					]
				}
			},
			"response": []
		},
		{
			"name": "client reset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('status', \"reset\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseClientUrl}}/reset",
					"host": [
						"{{baseClientUrl}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "client set delay",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData.status).to.eql(\"delay set\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"delay\");\r",
							"    pm.expect(jsonData.delay).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.delay).to.eql(2)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "new_delay",
							"value": "2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseClientUrl}}/set_delay",
					"host": [
						"{{baseClientUrl}}"
					],
					"path": [
						"set_delay"
					]
				}
			},
			"response": []
		}
	]
}